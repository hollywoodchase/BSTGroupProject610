<?php
//code comments generated by chatGPT for convenience
class Node {
    public $fileName; // Define a public variable to store the file name associated with the node
    public $left; // Define a public variable to store the left child of the node
    public $right; // Define a public variable to store the right child of the node

    public function __construct($fileName) { // Constructor method for the Node class
        $this->fileName = $fileName; // Initialize the file name for the node
        $this->left = null; // Initialize the left child as null
        $this->right = null; // Initialize the right child as null
    }
}

class TextFileBST {
    private $root; // Define a private variable to store the root node of the BST

    public function insert($fileName) { // Method to insert a file name into the BST
        $this->root = $this->insertRec($this->root, $fileName); // Call the recursive insert method
    }

    private function insertRec($node, $fileName) { // Recursive method to insert a file name
        if ($node === null) { // If the current node is null, create a new node with the file name
            $node = new Node($fileName);
            return $node;
        }

        if (strcmp($fileName, $node->fileName) < 0) { // If the file name is less than the current node's file name, insert it in the left subtree
            $node->left = $this->insertRec($node->left, $fileName);
        } else if (strcmp($fileName, $node->fileName) > 0) { // If the file name is greater than the current node's file name, insert it in the right subtree
            $node->right = $this->insertRec($node->right, $fileName);
        }

        return $node; // Return the updated node
    }

    public function displayInOrder() { // Method to display the contents of the BST in inorder traversal
        $this->inOrderRec($this->root);
    }

    private function inOrderRec($node) { // Recursive method to perform inorder traversal
        if ($node !== null) {
            $this->inOrderRec($node->left); // Recursively traverse the left subtree
            echo $node->fileName . "\n"; // Display the file name associated with the current node
            $this->inOrderRec($node->right); // Recursively traverse the right subtree
        }
    }

    public function search($fileName) { // Method to search for a file name in the BST
        return $this->searchRec($this->root, $fileName); // Call the recursive search method
    }

    private function searchRec($node, $fileName) { // Recursive method to search for a file name
        if ($node === null) { // If the current node is null, the file name is not found
            return false;
        }

        if ($fileName === $node->fileName) { // If the file name matches the current node's file name, it is found
            return true;
        }

        return strcmp($fileName, $node->fileName) < 0 ? // Recursively search in the left or right subtree based on comparison
               $this->searchRec($node->left, $fileName) : 
               $this->searchRec($node->right, $fileName);
    }
}

$bst = new TextFileBST(); // Create a new instance of the TextFileBST class to represent the BST
$directoryPath = 'C:\Users\Rob\Desktop\web\text files'; // Update this path as needed
$files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($directoryPath)); // Iterate through files in the specified directory
foreach ($files as $file) { // Loop through each file
    if ($file->isFile() && strtolower($file->getExtension()) == 'txt') { // Check if the file is a text file
        $bst->insert($file->getFilename()); // Insert the file name into the BST
    }
}

// Interactive command loop
while (true) { // Infinite loop for user interaction
    $input = readline("Enter command (display, search [filename], exit): "); // Prompt the user for input
    if ($input === "exit") { // If the user wants to exit, break the loop
        break;
    } elseif ($input === "display") { // If the user wants to display the contents of the BST
        $bst->displayInOrder(); // Display the contents of the BST in inorder traversal
    } elseif (strpos($input, "search ") === 0) { // If the user wants to search for a file name
        $fileName = substr($input, 7); // Extract the file name from the input
        if ($bst->search($fileName)) { // If the file name is found in the BST, display a message
            echo "$fileName was found in the BST.\n";
        } else { // If the file name is not found in the BST, display a message
            echo "$fileName was not found in the BST.\n";
        }
    } else { // If the user enters an unknown command
        echo "Unknown command. Please use 'display', 'search [filename]', or 'exit'.\n";
    }
}
